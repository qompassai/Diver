local lualine_themes = {
	"tokyonight",
	"nightfox",
	"onedark",
	"tokyonight",
	"gruvbox",
	"catppuccin",
	"everforest",
	"nord",
	"dracula",
	"material",
	"monokai",
	"palenight",
	"edge",
	"darkplus",
	"vscode",
	"ayu_dark",
	"carbonfox",
	"moonfly",
	"horizon",
	"dracula",
	"gotham",
	"github_dark",
	"onedarkpro",
	"nightowl",
	"spacecamp",
	"nordfox",
	"halcyon",
	"synthwave84",
	"matrix",
	"vim-monochrome",
	"gruvbox-material-dark-hard",
	"sublimemonokai",
}

local function debounce(func, timeout)
	local debounce_timer = nil

	return function(...)
		local args = { ... }
		if debounce_timer then
			vim.fn.timer_stop(debounce_timer)
		end
		debounce_timer = vim.fn.timer_start(timeout, function()
			func(unpack(args))
		end)
	end
end

local function preview_lualine_theme_with_telescope()
	local themes = lualine_themes
	require("telescope.pickers")
		.new({}, {
			prompt_title = "Select Lualine Theme",
			finder = require("telescope.finders").new_table({
				results = themes,
			}),
			sorter = require("telescope.config").values.generic_sorter({}),
			attach_mappings = function(prompt_bufnr, map)
				local actions = require("telescope.actions")
				local action_state = require("telescope.actions.state")

				local set_lualine_theme = debounce(function(selection)
					if selection and selection[1] then
						if vim.api.nvim_win_is_valid(prompt_bufnr) then
							pcall(function()
								require("lualine").setup({
									options = {
										theme = selection[1],
									},
								})
								vim.notify("Lualine theme preview: " .. selection[1], vim.log.levels.INFO)
							end)
						end
					end
				end, 50)
				map("i", "<CR>", function()
					actions.close(prompt_bufnr)
					local selection = action_state.get_selected_entry()
					if selection then
						require("lualine").setup({
							options = {
								theme = selection[1],
							},
						})
						vim.notify("Lualine theme switched to: " .. selection[1], vim.log.levels.INFO)
					end
				end)

				map("i", "<Down>", function()
					actions.move_selection_next(prompt_bufnr)
					local selection = action_state.get_selected_entry()
					set_lualine_theme(selection)
				end)

				map("i", "<Up>", function()
					actions.move_selection_previous(prompt_bufnr)
					local selection = action_state.get_selected_entry()
					set_lualine_theme(selection)
				end)

				map("n", "<CR>", function()
					actions.close(prompt_bufnr)
					local selection = action_state.get_selected_entry()
					if selection then
						require("lualine").setup({
							options = {
								theme = selection[1],
							},
						})
						vim.notify("Lualine theme switched to: " .. selection[1], vim.log.levels.INFO)
					end
				end)

				map("n", "j", function()
					actions.move_selection_next(prompt_bufnr)
					local selection = action_state.get_selected_entry()
					set_lualine_theme(selection)
				end)

				map("n", "k", function()
					actions.move_selection_previous(prompt_bufnr)
					local selection = action_state.get_selected_entry()
					set_lualine_theme(selection)
				end)

				return true
			end,
		})
		:find()
end

_G.preview_lualine_theme_with_telescope = preview_lualine_theme_with_telescope

vim.api.nvim_set_keymap(
	"n",
	"<leader>lt",
	":lua preview_lualine_theme_with_telescope()<CR>",
	{ noremap = true, silent = true, desc = "[l]ualine [t]oggle theme" }
)

return {
	{
		"nvim-lualine/lualine.nvim",
		lazy = false,
		requires = { "nvim-tree/nvim-web-devicons", opt = true },
		config = function()
			local function os_data()
				local uname = vim.loop.os_uname().sysname
				if uname:match("Linux") then
					local os_release = vim.fn.system("cat /etc/os-release")
					if os_release:match("Arch") then
						return "ïŒƒ"
					elseif os_release:match("Ubuntu") then
						return "ïŒ›"
					else
						return "ïŒš"
					end
				elseif uname:match("Darwin") then
					return "ï£¿ "
				else
					return "ï…º"
				end
			end
			local function rose_status()
				local status_info = require("rose.config").get_status_info()
				local status = ""
				if status_info.is_chat then
					status = status_info.prov.chat.name
				else
					status = status_info.prov.command.name
				end
				return string.format("%s(%s)", status, status_info.model)
			end
			local function datetime()
				local current_time = os.date("*t")
				return string.format(
					"%02d/%02d/%04d %02d:%02d:%02d",
					current_time.month,
					current_time.day,
					current_time.year,
					current_time.hour,
					current_time.min,
					current_time.sec
				)
			end

			require("lualine").setup({
				options = {
					icons_enabled = true,
					theme = lualine_themes[1],
					component_separators = { left = "î‚±", right = "î‚³" },
					section_separators = { left = "î‚°", right = "î‚²" },
					disabled_filetypes = {
						statusline = {},
						winbar = {
							lualine_a = { rose_status },
						},
					},
					always_divide_middle = true,
					globalstatus = false,
				},
				refresh = {
					statusline = 1000,
					tabline = 1000,
					winbar = 1000,
				},
				sections = {
					lualine_a = { "mode" },
					lualine_b = {
						{
							"branch",
							icon = "î‚ ",
						},
						{
							"diff",
							symbols = { added = " ïƒ¾ ", modified = " ï…‹  ", removed = " ï…†  " },
							colored = true, -- Enable colored output
						},
						{
							function()
								local tag = vim.fn.system("git describe --tags --abbrev=0 2>/dev/null")
								tag = vim.trim(tag)

								if tag == "" then
									return ""
								else
									return "ï§¸ " .. tag
								end
							end,
							cond = function()
								return vim.fn.isdirectory(".git") == 1
							end,
							color = { fg = "#b5bd68", gui = "bold" },
						},
						{
							"diagnostics",
							sources = { "nvim_diagnostic" },
							sections = { "error", "warn", "info", "hint" },
							diagnostics_color = {
								error = { fg = "#e06c75" },
								warn = { fg = "#e5c07b" },
								info = { fg = "#56b6c2" },
								hint = { fg = "#98c379" },
							},
							symbols = {
								error = "ï